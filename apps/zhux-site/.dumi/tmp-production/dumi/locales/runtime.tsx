// @ts-nocheck
// This file is generated by Umi automatically
// DO NOT CHANGE IT MANUALLY!
import { history } from "dumi"
import React, { useState, useLayoutEffect, useCallback, type ReactNode } from "react"
import {
  RawIntlProvider,
  createIntl,
  createIntlCache,
} from "D:/code/@turbo/zhux-utils/node_modules/.pnpm/react-intl@6.4.4_react@18.2.0_typescript@4.8.4/node_modules/react-intl"
import { useIsomorphicLayoutEffect } from "D:/code/@turbo/zhux-utils/node_modules/.pnpm/dumi@2.2.0_@babel+core@7.22.10_@types+node@14.18.28_@types+react@18.0.20_eslint@8.24.0_postcs_5sx7lkctg624cq6aha6t23msqy/node_modules/dumi/dist/client/theme-api/utils.js"
import { locales, messages } from "./config"

const cache = createIntlCache()

const LocalesContainer: FC<{ children: ReactNode }> = props => {
  const getIntl = useCallback(() => {
    const matched = locales
      .slice()
      .reverse()
      .find(locale =>
        "suffix" in locale
          ? // suffix mode
            history.location.pathname.replace(/([^/])\/$/, "$1").endsWith(locale.suffix)
          : // base mode
            history.location.pathname.replace(/([^/])\/$/, "$1").startsWith("/zhux-utils" + locale.base)
      )
    const locale = matched ? matched.id : locales[0].id

    return createIntl({ locale, messages: messages[locale] || {} }, cache)
  }, [])
  const [intl, setIntl] = useState(() => getIntl())

  useIsomorphicLayoutEffect(() => {
    return history.listen(() => {
      setIntl(getIntl())
    })
  }, [])

  return (
    <RawIntlProvider value={intl} key={intl.locale}>
      {props.children}
    </RawIntlProvider>
  )
}

export function i18nProvider(container: Element) {
  return React.createElement(LocalesContainer, null, container)
}
